Sıralı Progreamlama Dilleri- Basic,QBasic, GWBasic

Fonksiyonel Programlama Dilleri, ilk olarak kütüphane kavramı çıkmıştır. - C, Pascal

OOP- 

Component Based Programlama Dilleri-

*Kaynak kodu benim anlayacağım dildir. Compile makine diline çevirir.

---------------------------------------------------------------------------------------------------------------

OVERLOADING (Aşırı Yükleme):
metodun ismi aynı olucak imzası farklı olucak. 
yani metot ismi aynı olacak farklı parametre tipi yada farklı parametre sayısı olmalı. 
dönüş tipi farklı da olabilir olmayadabilir.
örneğin metot isimleri aynı parametreler aynı dönüş tipinin farklı olması overloading için yeterli değil.
class Program
    {
        static int ortalama(int sayi1,int sayi2)
        {
            int sonuc = (sayi1 + sayi2) / 2;
            return sonuc;
        }
 
        static int ortalama(int sayi1, int sayi2,int sayi3)
        {
            int sonuc = (sayi1 + sayi2+sayi3) / 2;
            return sonuc;
        }
        static void Main(string[] args)
        {
            Console.WriteLine(ortalama(13, 5));
            Console.WriteLine(ortalama(13, 8, 7));
            Console.ReadKey();
        }
    }


metot imzası:
metot ismi, metodun aldığı parametrelerin tipleri, metodun aldığı parametre sayısı.



OVERRIDE
Kalıtım yolu ile sınıflar birbirinden türetilir ve bir sınıfın diğer bir sınıftan türediği zaman, 
türediği sınıfın bütün özelliklerini kullanır. 
Temel sınıftan türetilmiş sınıflara aktarılan metotları her zaman olduğu gibi kullanmak istemeyebiliriz.
Bu metotları türetilmiş sınıf içerisinde yeniden tanımlayabilmek için virtual ve override anahtar sözcüklerini kullanırız.
Virtual metotlar kalıtım yolu ile aktarıldıkları sınıfların içerisinde override edilerek değiştirilebilirler. 
Eğer override edilmezlerse temel sınıf içerisinde tanımlandıkları şekilde çalışırlar.

public class Program
    {
        public static void Main(string[] args)
        {
            Transactions transactions = new Transactions();
            transactions.Multiplication(4,3);

            Calculate calculate = new Calculate();
            calculate.Multiplication(5, 7);

            Console.ReadLine();
        }
    }

    public class Transactions
    {
        public virtual void Multiplication(int x, int y)
        {
            Console.WriteLine("virtual: " + x * y);
        }
    }

    public class Calculate : Transactions
    {
        public override void Multiplication(int x, int y)
        {
            Console.WriteLine("override: " + x * y);
        }
    }


override edilmiş bir metot içerisinden metodun orijinalini (temel sınıf içerisindeki halini) çağırabilmek 
için base anahtar sözcüğü kullanılır.


override da sadece metotun içi farklı.
overloadingte metot ismi aynı imza farklı.


-------------------------------------------------------------------------------------------------------------------
*struct yapısı bak.
*referans tipli değişkenler, değer tipli değişkenler bak.
*ön tanımlı değişkenler bak.
*IL kavramına bak.

polimorfizm, kapsüllmeme, kalıtım, abstraction

1.Encapsulation
6 tane encapsulation için kullandığımız şeyler var. Access Modifiers ları kullanarak Encapsulation yaparız. amaç olayı sadeleştirmektir.
public, private, internal, protected, protected internal, private protected

2.Inheritance
C# ile ilgili teknik bir detay var iş görüşmelerinde soruyorlar: 
multiple inheritance sadece C++ da var. yani bir sınıfın birden fazla atası olabilir. 
C# da bir sınıfın bir tane atası olabilir. yani multiple inheritance yoktur.


3.Polimorfizm (çok biçimlillik yada çok şekillilik)
aynı isimdeki bir metodun farklı sınıflarda farklı şekilde çalışmasına polimorfizm diyoruz. override etme işlemine polimorfizm denir. 



4.Abstraction
bir dilde milyon tane class var. 4 çeşit class vardır. abstract class, sield class, statik class, normal class. 
şekil abstract bir kavramdır. 
şekilden bir instance oluşturulamaz. 

--parametreli yapıcı metot oluşturunca sistem otomatik olarak parametresiz yapıcı metot oluşturmaz. 

--nesne oluşunca hip bölgesinde bir alan kaplıyor. class ve obje aynı şey değildir. 












